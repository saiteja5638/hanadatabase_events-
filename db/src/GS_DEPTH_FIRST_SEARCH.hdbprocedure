PROCEDURE "GS_DEPTH_FIRST_SEARCH"(
    IN i_startVertex NVARCHAR(75),
    OUT o_vertices "TT_VERTICES_DFS"
  ) 
  LANGUAGE GRAPH 
  SQL SECURITY INVOKER 
  READS SQL DATA AS 
BEGIN 
	GRAPH g = Graph("SKIING");
	BIGINT c_visit = 0L;
	BIGINT c_exit = 0L;
	ALTER g ADD TEMPORARY VERTEX ATTRIBUTE (BIGINT "VISIT_ORDER");
	ALTER g ADD TEMPORARY VERTEX ATTRIBUTE (BIGINT "EXIT_ORDER");
	ALTER g ADD TEMPORARY VERTEX ATTRIBUTE (BIGINT "LEVEL");
	-- create an instance of the start vertex
	VERTEX v_start = Vertex(:g, :i_startVertex);
	-- traverse the graph from the start node, "hooking" into each vertex visit and exit.
	TRAVERSE DFS('OUTGOING') :g FROM :v_start
		ON VISIT VERTEX (Vertex v_visited, BIGINT lvl) {
			c_visit = :c_visit + 1L;
			v_visited."VISIT_ORDER" = :c_visit;
			v_visited."LEVEL" = :lvl;
		}
		-- the "exit vertex" hook is executed when each neighboring node has been processed
		ON EXIT VERTEX (Vertex v_exited) {
			c_exit = :c_exit + 1L;
			v_exited."EXIT_ORDER" = :c_exit;
	};
	o_vertices = SELECT :v."VERTEX_ID", :v."VISIT_ORDER", :v."EXIT_ORDER", :v."LEVEL" FOREACH v IN Vertices(:g);
END